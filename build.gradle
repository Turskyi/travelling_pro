// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        // sdk versions
        compile_sdk_version = 30
        build_tools_version = "30.0.3"
        min_sdk_version = 21
        target_sdk_version = 30
        version_code = 8
        version_name = "1.0.7"
    }
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$build_gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        // Google Services plugin (used with firebase)
        classpath "com.google.gms:google-services:$google_services_version"
        // Crashlytics Gradle plugin
        classpath "com.google.firebase:firebase-crashlytics-gradle:$firebase_crashlytics_gradle_version"
    }
}

subprojects {
    afterEvaluate {
        dependencies {
            // Kotlin
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            // Add to avoid  w:Kotlin runtime JAR files in the classpath should have the same version
            implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

            // dependency injection (Koin)
            implementation "org.koin:koin-android:$koin_version"
            implementation "org.koin:koin-core:$koin_version"
            implementation "org.koin:koin-androidx-scope:$koin_version"

            // (Asynchronous programming) coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

            // Retrofit2
            implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
            implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

            // Paging
            implementation "androidx.paging:paging-runtime:$paging_version"

            //  Bill of Materials for the Firebase platform
            implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")
            // When using the BoM, no need to specify versions in Firebase library dependencies

            // Declaring the dependencies for the Crashlytics and Analytics libraries
            implementation 'com.google.firebase:firebase-crashlytics-ktx'

            // Firebase SDK for Google Analytics
            implementation 'com.google.firebase:firebase-analytics-ktx'

            // Declare the dependency for the Cloud Firestore library
            implementation 'com.google.firebase:firebase-firestore-ktx'

            // FirebaseUI for Firebase Auth
            implementation "com.firebaseui:firebase-ui-auth:$firebase_ui_auth_version"

            // avoids "Service not registered" exception
            implementation "com.google.android.gms:play-services-basement:$play_services_basement_version"
        }
    }
}

allprojects {
    repositories {
        google()
//        jcenter is required for firebase-ui-auth and org.koin:koin-android
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.google.com" }
        maven { url "https://dl.bintray.com/ekito/koin" }
    }
}

ext {
    getParam = { key ->
        def value = System.getenv(key) ?: project.findProperty("env.$key")
        if (value) {
            println "$key = $value"
        }
        return value
    }
    HOST_URL = getParam("HOST_URL")

    SIGNING_KEY_DEBUG_PATH = getParam("SIGNING_KEY_DEBUG_PATH")
    SIGNING_KEY_DEBUG_PASSWORD = getParam("SIGNING_KEY_DEBUG_PASSWORD")
    SIGNING_KEY_DEBUG_KEY = getParam("SIGNING_KEY_DEBUG_KEY")
    SIGNING_KEY_DEBUG_KEY_PASSWORD = getParam("SIGNING_KEY_DEBUG_KEY_PASSWORD")

    SIGNING_KEY_RELEASE_PATH = getParam("SIGNING_KEY_RELEASE_PATH")
    SIGNING_KEY_RELEASE_PASSWORD = getParam("SIGNING_KEY_RELEASE_PASSWORD")
    SIGNING_KEY_RELEASE_KEY = getParam("SIGNING_KEY_RELEASE_KEY")
    SIGNING_KEY_RELEASE_KEY_PASSWORD = getParam("SIGNING_KEY_RELEASE_KEY_PASSWORD")
}

task clean(type: Delete) {
    delete rootProject.buildDir
}