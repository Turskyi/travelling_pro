// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        // sdk versions
        compile_sdk_version = 30
        build_tools_version = "30.0.3"
        min_sdk_version = 21
        target_sdk_version = 30
        version_code = 12
        version_name = "1.1.1"
    }
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // Google Services plugin (used with firebase)
        classpath "com.google.gms:google-services:$google_services_version"
        // Crashlytics Gradle plugin
        classpath "com.google.firebase:firebase-crashlytics-gradle:$firebase_crashlytics_gradle_version"
        // the dependency for the Performance Monitoring plugin
        classpath "com.google.firebase:perf-plugin:$firebase_perf_version"
    }
}

subprojects {
    afterEvaluate {
        dependencies {
            // (Asynchronous programming) coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

            // Retrofit2
            implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
            implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

            // Paging
            implementation "androidx.paging:paging-runtime:$paging_version"

            /* Bill of Materials for the Firebase platform.
             * When using the BoM, no need to specify versions in Firebase library dependencies */
            implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")

            // Declaring the dependencies for the Crashlytics library
            implementation 'com.google.firebase:firebase-crashlytics-ktx'

            // Firebase SDK for Google Analytics library
            implementation 'com.google.firebase:firebase-analytics-ktx'

            // Declaring the dependency for the Cloud Firestore library
            implementation 'com.google.firebase:firebase-firestore-ktx'
//            object storage service
            implementation "com.google.firebase:firebase-storage-ktx"

            // authentication (to get current user etc.)
            implementation "com.google.firebase:firebase-auth"

            // avoids "Service not registered" exception
            implementation "com.google.android.gms:play-services-basement:$play_services_basement_version"
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.google.com" }
    }
}

ext {
    getParam = { key ->
        def value = System.getenv(key) ?: project.findProperty("env.$key")
        if (value) {
            println "$key = $value"
        }
        return value
    }
    HOST_URL = getParam("HOST_URL")

    SIGNING_KEY_DEBUG_PATH = getParam("SIGNING_KEY_DEBUG_PATH")
    SIGNING_KEY_DEBUG_PASSWORD = getParam("SIGNING_KEY_DEBUG_PASSWORD")
    SIGNING_KEY_DEBUG_KEY = getParam("SIGNING_KEY_DEBUG_KEY")
    SIGNING_KEY_DEBUG_KEY_PASSWORD = getParam("SIGNING_KEY_DEBUG_KEY_PASSWORD")

    SIGNING_KEY_RELEASE_PATH = getParam("SIGNING_KEY_RELEASE_PATH")
    SIGNING_KEY_RELEASE_PASSWORD = getParam("SIGNING_KEY_RELEASE_PASSWORD")
    SIGNING_KEY_RELEASE_KEY = getParam("SIGNING_KEY_RELEASE_KEY")
    SIGNING_KEY_RELEASE_KEY_PASSWORD = getParam("SIGNING_KEY_RELEASE_KEY_PASSWORD")
}

task clean(type: Delete) {
    delete rootProject.buildDir
}